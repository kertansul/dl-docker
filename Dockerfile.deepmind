FROM nvidia/cuda:8.0-cudnn5-devel

MAINTAINER Shawn Chen <kertansul@gmail.com>

######################################################################
# Torch install
######################################################################


ARG TOPDIR = $PWD
ARG PREFIX = $PWD/torch
RUN echo "Installing Torch into: $PREFIX"

if [[ `uname` != 'Linux' ]]; then
  RUN echo 'Platform unsupported, only available for Linux'
  exit
fi
if [[ `which apt-get` == '' ]]; then
    RUN echo 'apt-get not found, platform not supported'
    exit
fi

# Install dependencies for Torch:
RUN apt-get update
RUN apt-get install -qqy build-essential \
                         gcc g++ \
                         cmake \
                         curl \
                         libreadline-dev \
                         git-core \
                         libjpeg-dev \
                         libpng-dev \
                         ncurses-dev \
                         imagemagick \
                         unzip \
                         libqt4-dev \
                         liblua5.1-0-dev \
                         libgd-dev
RUN echo "==> Torch7's dependencies have been installed"

# Build and install Torch7
RUN cd /tmp && \
    rm -rf luajit-rocks && \
    git clone https://github.com/torch/luajit-rocks.git && \
    cd luajit-rocks && \
    mkdir -p build && \
    cd build && \
    git checkout master; git pull && \
    rm -f CMakeCache.txt && \
    cmake .. -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_BUILD_TYPE=Release

ARG RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi
RUN make
ARG RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi
RUN make install
ARG RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi


ARG path_to_nvcc=$(which nvcc)
if [ -x "$path_to_nvcc" ]
then
    ARG cutorch=ok
    ARG cunn=ok
fi

# Install base packages:
RUN $PREFIX/bin/luarocks install cwrap
RUN $PREFIX/bin/luarocks install paths
RUN $PREFIX/bin/luarocks install torch
RUN $PREFIX/bin/luarocks install nn

[ -n "$cutorch" ] && \
(RUN $PREFIX/bin/luarocks install cutorch)
[ -n "$cunn" ] && \
(RUN $PREFIX/bin/luarocks install cunn)

RUN $PREFIX/bin/luarocks install luafilesystem
RUN $PREFIX/bin/luarocks install penlight
RUN $PREFIX/bin/luarocks install sys
RUN $PREFIX/bin/luarocks install xlua
RUN $PREFIX/bin/luarocks install image
RUN $PREFIX/bin/luarocks install env
RUN $PREFIX/bin/luarocks install qtlua
RUN $PREFIX/bin/luarocks install qttorch

RUN echo ""
RUN echo "=> Torch7 has been installed successfully"
RUN echo ""


RUN echo "Installing nngraph ... "
RUN $PREFIX/bin/luarocks install nngraph
RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi
RUN echo "nngraph installation completed"

RUN echo "Installing Xitari ... "
RUN cd /tmp
RUN rm -rf xitari
RUN git clone https://github.com/deepmind/xitari.git
RUN cd xitari
RUN $PREFIX/bin/luarocks make
RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi
RUN echo "Xitari installation completed"

RUN echo "Installing Alewrap ... "
RUN cd /tmp
RUN rm -rf alewrap
RUN git clone https://github.com/deepmind/alewrap.git
RUN cd alewrap
RUN $PREFIX/bin/luarocks make
RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi
RUN echo "Alewrap installation completed"

RUN echo "Installing Lua-GD ... "
RUN mkdir $PREFIX/src
RUN cd $PREFIX/src
RUN rm -rf lua-gd
RUN git clone https://github.com/ittner/lua-gd.git
RUN cd lua-gd
RUN sed -i "s/LUABIN=lua5.1/LUABIN=..\/..\/bin\/luajit/" Makefile
RUN $PREFIX/bin/luarocks make
RET=$?; if [ $RET -ne 0 ]; then RUN echo "Error. Exiting."; exit $RET; fi
RUN echo "Lua-GD installation completed"

RUN echo
RUN echo "You can run experiments by executing: "
RUN echo
RUN echo "   ./run_cpu game_name"
RUN echo
RUN echo "            or   "
RUN echo
RUN echo "   ./run_gpu game_name"
RUN echo
RUN echo "For this you need to provide the rom files of the respective games (game_name.bin) in the roms/ directory"
RUN echo

WORKDIR "/root"
