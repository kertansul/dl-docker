FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04

MAINTAINER Shawn Chen <kertansul@gmail.com>

################
### Settings ###
################

# Tensorflow
ARG TF_BRANCH=r1.4
ARG BAZEL_VERSION=0.5.4
ARG TF_AVAILABLE_CPUS=32
# nvidia Caffe
ARG CAFFE_VERSION=caffe-0.16
# Pytorch
ARG PYTORCH_VERSION=torch-0.2.0

#############
### Basic ###
#############

# Install some dependencies
RUN apt-get update && apt-get install -y \
		bc \
		build-essential \
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libopenjpeg-dev \
		libpng12-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		python-dev \
		software-properties-common \
		unzip \
		vim \
		wget \
		zlib1g-dev \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/* && \
# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
	update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3

# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python get-pip.py && \
	rm get-pip.py

# Add SNI support to Python
RUN pip --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1

# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary
# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)
RUN apt-get update && apt-get install -y \
		python-numpy \
		python-scipy \
		python-nose \
		python-h5py \
		python-skimage \
		python-matplotlib \
		python-pandas \
		python-sklearn \
		python-sympy \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/*

########################
### Build Tensorflow ###
########################

# modified from https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/docker/Dockerfile.devel-gpu-cuda9-cudnn7
# some of them may be duplicated in basic installation, but I just leave it there
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        golang \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        python-pip \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        wget \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN pip --no-cache-dir install --upgrade \
        pip setuptools

RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        scipy \
        sklearn \
        pandas \
        wheel \
        && \
    python -m ipykernel.kernelspec

# notebook setup will be left in the last section #

# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    wget --quiet https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    wget --quiet https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

# Download and build TensorFlow.
WORKDIR /
RUN git clone https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git checkout ${TF_BRANCH}
WORKDIR /tensorflow

# Configure the build for our CUDA configuration.
ENV CI_BUILD_PYTHON=python \
    LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH} \
    CUDNN_INSTALL_PATH=/usr/lib/x86_64-linux-gnu \
    PYTHON_BIN_PATH=/usr/bin/python \
    PYTHON_LIB_PATH=/usr/local/lib/python2.7/dist-packages \
    TF_NEED_CUDA=1 \
    TF_CUDA_VERSION=8.0 \
    TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,5.2,6.0,6.1 \
    TF_CUDNN_VERSION=6
RUN ./configure

# Build and Install TensorFlow.
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \
    tensorflow/tools/ci_build/builds/configured GPU \
    bazel build -c opt \
                --config=cuda \
                --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
                --jobs=${TF_AVAILABLE_CPUS} \
                tensorflow/tools/pip_package:build_pip_package \
                tensorflow/core/profiler:profiler && \
    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    mkdir /pip_pkg && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /pip_pkg && \
    pip --no-cache-dir install --upgrade /pip_pkg/tensorflow-*.whl
# Clean up pip wheel and Bazel cache when done.
RUN rm -rf /pip_pkg && \
    rm -rf /root/.cache/pip

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

##########################
### Build nvidia Caffe ###
##########################

# Install dependencies for Caffe
RUN apt-get update && apt-get install -y \
		libboost-all-dev \
		libgflags-dev \
		libgoogle-glog-dev \
		libhdf5-serial-dev \
		libleveldb-dev \
		liblmdb-dev \
		libopencv-dev \
		libprotobuf-dev \
		libsnappy-dev \
		protobuf-compiler

# Install nvidia NCCL to support multiple GPU
RUN cd /root/ && git clone https://github.com/NVIDIA/nccl.git && \
	cd nccl && \
	make CUDA_HOME=/usr/local/cuda test && \
	make PREFIX=/usr/local install

# Install Caffe 
RUN git clone -b ${CAFFE_VERSION} --depth 1 https://github.com/NVIDIA/caffe.git /root/caffe && \
	cd /root/caffe && \
	cat python/requirements.txt | xargs -n1 pip install && \
	mkdir build && cd build && \
	cmake -DCUDA_ARCH_NAME="Manual" -DCUDA_ARCH_BIN="52 60" -DCUDA_ARCH_PTX="60" -DUSE_CUDNN=1 -DBLAS=Open -USE_NCCL=On .. && \
	make -j"$(nproc)" all && \
	make install

# Set up Caffe environment variables
ENV CAFFE_ROOT=/root/caffe
ENV PYCAFFE_ROOT=$CAFFE_ROOT/python
ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
	PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH

RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig

#######################
### Install Pytorch ###
#######################
 
RUN pip install http://download.pytorch.org/whl/cu80/${PYTORCH_VERSION}.post3-cp27-cp27mu-manylinux1_x86_64.whl
RUN pip install torchvision

#############################################
### Other utilities and environment setup ###
#############################################

# Install GraphViz for visualizing Caffe networks
RUN apt-get update && apt-get install -y graphviz
RUN pip --no-cache-dir install GraphViz
# Install OpenCV
RUN apt-get install python-opencv
# Install mpld3 for interacting charts on ipython notebook
RUN pip --no-cache-dir install mpld3
# Install scikit-image and upgrade pandas
RUN pip --no-cache-dir install scikit-image
RUN pip --no-cache-dir install -U pandas

# Install t-SNE tutorial dependencies: scikit-learn 0.18.1, seaborn, and moviepy
# https://github.com/oreillymedia/t-SNE-tutorial
RUN pip install --upgrade html5lib==1.0b8
RUN pip --no-cache-dir install -U scikit-learn seaborn moviepy

# Install pip3 and useful dependencies
RUN apt-get update && apt-get install -y python3-pip
RUN pip3 --no-cache-dir install numpy \
                                pandas 
RUN pip3 --no-cache-dir install scikit-image \
                                matplotlib

# Install Python3 for notebook
RUN python3 -m pip install ipykernel
RUN python3 -m ipykernel install --user

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Update Vim 
RUN add-apt-repository -y ppa:jonathonf/vim
RUN apt-get update
RUN apt-get install -y vim


WORKDIR "/root"
