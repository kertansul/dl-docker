FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

MAINTAINER Shawn Chen <kertansul@gmail.com>

################
### Settings ###
################

# Tensorflow
ARG TF_BRANCH=v1.8.0-rc1
ARG BAZEL_VERSION=0.11.0
ARG TF_AVAILABLE_CPUS=32
# nvidia Caffe
ARG CAFFE_BRANCH=caffe-0.17
# Pytorch
ARG PYTORCH_TAG=v0.4.0

########################
### Build Tensorflow ###
########################

# modified from https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/docker/Dockerfile.devel-gpu-cuda9-cudnn7
# some of them may be duplicated in basic installation, but I just leave it there
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        cuda-command-line-tools-9-0 \
        cuda-cublas-dev-9-0 \
        cuda-cudart-dev-9-0 \
        cuda-cufft-dev-9-0 \
        cuda-curand-dev-9-0 \
        cuda-cusolver-dev-9-0 \
        cuda-cusparse-dev-9-0 \
        curl \
        git \
        libcurl3-dev \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        wget \
        && \
    rm -rf /var/lib/apt/lists/* && \
    find /usr/local/cuda-9.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \
    rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

RUN pip --no-cache-dir install \
        Pillow \
        h5py \
        ipykernel \
        jupyter \
        matplotlib \
        mock \
        numpy \
        scipy \
        sklearn \
        pandas \
        && \
    python -m ipykernel.kernelspec


# notebook setup will be left in the last section #

# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
# bazel cleanup
RUN cd / && \
    rm -f bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    rm -rf /bazel

# Download and build TensorFlow.
WORKDIR /root/
RUN git clone https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git checkout ${TF_BRANCH}
WORKDIR /root/tensorflow

# Configure the build for our CUDA configuration.
ENV CI_BUILD_PYTHON python
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_NEED_CUDA 1
ENV TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,5.2,6.0,6.1
ENV TF_CUDA_VERSION=9.0
ENV TF_CUDNN_VERSION=7

# Build and Install TensorFlow.
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \
    tensorflow/tools/ci_build/builds/configured GPU \
    bazel build -c opt --config=cuda \
        --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        tensorflow/tools/pip_package:build_pip_package && \
    rm /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip && \
    pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl
# Clean up pip wheel and Bazel cache when done.
RUN rm -rf /pip_pkg && \
    rm -rf /root/.cache/pip

# Install google pprof (for Profiler visualization)
RUN apt-get update && apt-get install -y graphviz
RUN pip --no-cache-dir install GraphViz
RUN cd ~ && curl -O https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz && \
    tar xvf go1.10.2.linux-amd64.tar.gz && \
    mv go /usr/local && \
    rm go1.10.2.linux-amd64.tar.gz
ENV GOPATH=/root/go
ENV PATH=/usr/local/go/bin:$GOPATH/bin:$PATH
RUN go get github.com/google/pprof

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

##########################
### Build nvidia Caffe ###
##########################

# Install dependencies for Caffe
RUN apt-get update && apt-get install -y \
        cmake \
        libatlas-base-dev \
        libboost-all-dev \
        libgflags-dev \
        libgoogle-glog-dev \
        libhdf5-serial-dev \
        libleveldb-dev \
        liblmdb-dev \
        libopencv-dev \
        libprotobuf-dev \
        libsnappy-dev \
        protobuf-compiler \
        libturbojpeg \
        && \
    rm -rf /var/lib/apt/lists/*

# Install nvidia NCCL to support multiple GPU
RUN cd /root/ && git clone https://github.com/NVIDIA/nccl.git && \
    cd nccl && \
    make CUDA_HOME=/usr/local/cuda test && \
    make PREFIX=/usr/local install

# Install Caffe 
RUN git clone -b ${CAFFE_BRANCH} --depth 1 https://github.com/NVIDIA/caffe.git /root/caffe && \
    cd /root/caffe && \
    cat python/requirements.txt | xargs -n1 pip install && \
    mkdir build && cd build && \
    cmake -DCUDA_ARCH_NAME="Manual" -DCUDA_ARCH_BIN="52 60" -DCUDA_ARCH_PTX="60" \
          -DUSE_CUDNN=1 -USE_NCCL=On -DBLAS=atlas .. && \
    make -j"$(nproc)" all && \
    make install

# Set up Caffe environment variables
ENV CAFFE_ROOT=/root/caffe
ENV PYCAFFE_ROOT=$CAFFE_ROOT/python
ENV PYTHONPATH=$PYCAFFE_ROOT:$PYTHONPATH \
    PATH=$CAFFE_ROOT/build/tools:$PYCAFFE_ROOT:$PATH

RUN echo "$CAFFE_ROOT/build/lib" >> /etc/ld.so.conf.d/caffe.conf && ldconfig

#######################
### Install Pytorch ###
#######################

RUN git clone --branch ${PYTORCH_TAG} --recursive https://github.com/pytorch/pytorch.git /root/pytorch 
WORKDIR /root/pytorch

# Issues with NCCL, see https://github.com/pytorch/pytorch/issues/6451
RUN sed -i "s/WITH_SYSTEM_NCCL = True/WITH_SYSTEM_NCCL = False/" tools/setup_helpers/nccl.py
RUN pip install -r requirements.txt
RUN python setup.py install

#############################################
### Other utilities and environment setup ###
#############################################

# Install OpenCV
RUN apt-get update && apt-get install -y python-opencv
# Install mpld3 for interacting charts on ipython notebook
RUN pip --no-cache-dir install mpld3
# Install scikit-image and upgrade pandas
RUN pip --no-cache-dir install scikit-image
RUN pip --no-cache-dir install -U numpy
RUN pip --no-cache-dir install -U pandas

# Install pip3 and useful dependencies
RUN apt-get update && apt-get install -y python3-pip
RUN pip3 --no-cache-dir install numpy \
                                pandas
RUN pip3 --no-cache-dir install scikit-image \
                                matplotlib

# Install Python3 for notebook
RUN python3 -m pip install ipykernel
RUN python3 -m ipykernel install --user

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Vim and Bash Settings
RUN add-apt-repository -y ppa:jonathonf/vim && \
    apt-get update && apt-get install -y vim
COPY .bashrc /root
COPY .vimrc /root
COPY vimrc /etc/vim
RUN git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
RUN vim +PluginInstall +qall
RUN cd ~/.vim/bundle/YouCompleteMe && ./install.py --clang-completer
RUN cd ~/.vim/bundle/vim-colorschemes/ && cp -r colors ~/.vim/

# install less for better git log/diff displays
RUN apt-get install -y less

# updating tensorbaord based on 
# https://github.com/tensorflow/tensorflow/issues/18644

RUN pip install -U tensorboard

WORKDIR "/root"
